==1709== Memcheck, a memory error detector
==1709== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==1709== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==1709== Command: ./hsh
==1709== 
==1709== Conditional jump or move depends on uninitialised value(s)
==1709==    at 0x400DC5: _strlen (strings.c:60)
==1709==    by 0x400DF1: _strdup (strings.c:80)
==1709==    by 0x403297: add_node_history (history.c:32)
==1709==    by 0x403E8A: main (main.c:42)
==1709== 
==1709== Conditional jump or move depends on uninitialised value(s)
==1709==    at 0x4C2E0F8: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1709==    by 0x401E0C: tokenize (tokenizer.c:53)
==1709==    by 0x403EA4: main (main.c:44)
==1709== 
==1709== Conditional jump or move depends on uninitialised value(s)
==1709==    at 0x4020C9: tokenize (tokenizer.c:71)
==1709==    by 0x403EA4: main (main.c:44)
==1709== 
==1709== Invalid write of size 1
==1709==    at 0x403A73: chop_tilda (cd.c:13)
==1709==    by 0x403B7A: yellow_brick_road (cd.c:50)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709==  Address 0x5203f89 is 0 bytes after a block of size 9 alloc'd
==1709==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1709==    by 0x401250: safe_malloc (memmalloc.c:70)
==1709==    by 0x403A16: chop_tilda (cd.c:8)
==1709==    by 0x403B7A: yellow_brick_road (cd.c:50)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709== 
==1709== Invalid read of size 1
==1709==    at 0x400DC0: _strlen (strings.c:60)
==1709==    by 0x403B90: yellow_brick_road (cd.c:51)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709==  Address 0x5203f89 is 0 bytes after a block of size 9 alloc'd
==1709==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1709==    by 0x401250: safe_malloc (memmalloc.c:70)
==1709==    by 0x403A16: chop_tilda (cd.c:8)
==1709==    by 0x403B7A: yellow_brick_road (cd.c:50)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709== 
==1709== Invalid read of size 1
==1709==    at 0x400DC0: _strlen (strings.c:60)
==1709==    by 0x403B5A: yellow_brick_road (cd.c:49)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1709== 
==1709== 
==1709== Process terminating with default action of signal 11 (SIGSEGV)
==1709==  Access not within mapped region at address 0x0
==1709==    at 0x400DC0: _strlen (strings.c:60)
==1709==    by 0x403B5A: yellow_brick_road (cd.c:49)
==1709==    by 0x403D02: _cd (cd.c:99)
==1709==    by 0x4019DA: exec_builtins (execfuncs.c:41)
==1709==    by 0x401C45: execute (execfuncs.c:147)
==1709==    by 0x4033E9: worker_execute_core (worker.c:30)
==1709==    by 0x4034A1: worker_execute (worker.c:52)
==1709==    by 0x403F1B: main (main.c:56)
==1709==  If you believe this happened as a result of a stack
==1709==  overflow in your program's main thread (unlikely but
==1709==  possible), you can try to increase the size of the
==1709==  main thread stack using the --main-stacksize= flag.
==1709==  The main thread stack size used in this run was 8388608.
==1709== 
==1709== HEAP SUMMARY:
==1709==     in use at exit: 15,853 bytes in 136 blocks
==1709==   total heap usage: 259 allocs, 123 frees, 22,566 bytes allocated
==1709== 
==1709== LEAK SUMMARY:
==1709==    definitely lost: 5,129 bytes in 6 blocks
==1709==    indirectly lost: 0 bytes in 0 blocks
==1709==      possibly lost: 0 bytes in 0 blocks
==1709==    still reachable: 10,724 bytes in 130 blocks
==1709==         suppressed: 0 bytes in 0 blocks
==1709== Rerun with --leak-check=full to see details of leaked memory
==1709== 
==1709== For counts of detected and suppressed errors, rerun with: -v
==1709== Use --track-origins=yes to see where uninitialised values come from
==1709== ERROR SUMMARY: 9 errors from 6 contexts (suppressed: 0 from 0)
